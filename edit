#!/usr/bin/env python

import os
from subprocess import Popen, call, PIPE, STDOUT
from glob import glob

from plumbum import local

PELICAN_CONTENT = os.path.expanduser(os.getenv('PELICAN_CONTENT'))

if not PELICAN_CONTENT:
    print("You should set PELICAN_CONTENT env variable.")
    exit(2)

local.cwd.chdir(PELICAN_CONTENT)

def git_repost():

    GIT = local['git']

    adding = GIT['add', '.']()
    print(adding)

    commiting = GIT['commit', '-a', '-m', 'autocommit']()
    print(commiting)

    pushing = GIT['push']()
    print(pushing)

DATE = local['date']
LS = local['ls']
SH = local['sh']

DATE_STRING = DATE().strip()

EDITOR = os.getenv('EDITOR')

FILE_EXTENSION = ".md"

md_files_list = LS[glob('*.md')]().strip().split('\n')
md_files_str = "\n".join(md_files_list)

fzf = Popen('fzf', shell=True, stdin=PIPE, stdout=PIPE)
output, err = fzf.communicate(input=md_files_str.encode('utf-8'))


filename = output.decode('utf-8').strip()
if filename == "":
    print("No file chosen; exiting...")
    exit(0)
filepath = f"{PELICAN_CONTENT}/{filename}"

print(filename, filepath)
call([EDITOR, filepath])

do_post = input('Commit and push changes, thus modifying'
                ' the `modified\' date? (N/y) ')

if do_post in ('y', 'Y'):

    modified_line = int()

    with open(filepath, 'r') as post:
        post_data = post.readlines()

    for idx, line in enumerate(post_data):
        if line.startswith('modified:'):
            post_data[idx] = f'modified: {DATE_STRING}\n'
            break

    post_date_modified = "".join(post_data)

    with open(filepath, 'w') as post:
        post.write(post_date_modified)

    git_repost()
